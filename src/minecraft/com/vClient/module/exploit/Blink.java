package com.vClient.module.exploit;

import com.vClient.event.EventTarget;
import com.vClient.event.events.EventReceivePacket;
import com.vClient.module.Category;
import com.vClient.module.Module;
import com.vClient.vClient;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import org.lwjgl.input.Keyboard;

import java.util.concurrent.LinkedBlockingQueue;

public class Blink extends Module {
    private LinkedBlockingQueue<Packet> deletedPackets = new LinkedBlockingQueue<>();
    private int p = 0;

    public Blink() {
        super("Blink", Keyboard.CHAR_NONE, Category.EXPLOIT, "Suspend/cancel all movement packets.");
    }

    @Override
    public void onEnable() {
        if (mc.thePlayer == null)
            return;
        super.onEnable();
    }

    @EventTarget
    public void onPacket(EventReceivePacket event) {
        final Packet packet = event.getPacket();
        if (mc.thePlayer == null)
            return;
        if (packet instanceof C03PacketPlayer) {
            event.setCancelled(true);
            p += 1;
        }
        if (packet instanceof C03PacketPlayer.C04PacketPlayerPosition
                || packet instanceof C03PacketPlayer.C06PacketPlayerPosLook
                || packet instanceof C08PacketPlayerBlockPlacement || packet instanceof C0APacketAnimation
                || packet instanceof C0BPacketEntityAction || packet instanceof C02PacketUseEntity) {
            event.setCancelled(true);
            deletedPackets.add(packet);
            p += 1;
            if (packet instanceof C03PacketPlayer)
                p -= 1;
        }
    }

    @Override
    public void onDisable() {
        if (mc.thePlayer == null)
            return;
        blink();
        vClient.addChatMessage("Blink: " + p);
        p = 0;
        super.onDisable();
    }

    private void blink() {
        try {
            while (!deletedPackets.isEmpty())
                mc.getNetHandler().getNetworkManager().sendPacket(deletedPackets.take());
        } catch (final Exception e) {
            e.printStackTrace();
        }
    }
}
